Program 1

import emoji

user_input = input("Input: ")

print(emoji.emojize("Output: " + user_input))


Program 2

import sys
import random

# The documentation for pyfiglet isn’t very clear, but you can use the module as follows
from pyfiglet import Figlet
figlet = Figlet()

# Zero if the user would like to output text in a random font.
if len(sys.argv) == 1:
    isRandom = True
elif len(sys.argv) == 3 and sys.argv[1] in ["-f", "--font"]:
    isRandom = False
else:
    print("Invalid usage")
    sys.exit(1)

#You can then get a list of available fonts with code like this:
figlet.getFonts()

if isRandom == False:
    try:
        #You can set the font with code like this, wherein f is the font’s name as a str:
        font = figlet.setFont(font=sys.argv[2])
    except:
        print("Invalid usage")
        sys.exit(1)
else:
    #You can set the font with code like this, wherein f is the font’s name as a str:
    font = random.choice(figlet.getFonts())

# Get user input
msg = input("Input: ")

#And you can output text in that font with code like this, wherein s is that text as a str:
output = figlet.renderText(msg)

print("Output: ")
print(output)


Program 3

# Create list to keep track of names
names_list = []
# Loop forever
while True:
    try:
        # Get user input
        name = input("Name: ")
        names_list.append(name)
    except EOFError:
        # Create new line and stop the loop
        print()
        break
# Print the beginning of the output
print("Adieu, adieu, to " + names_list[0], end="")
# Check if there is only one name
if len(names_list) == 1:
    print()
elif len(names_list) == 2:
    print(" and " + names_list[1])
# Loop through names list
else:
    length_of_the_list = len(names_list)
    for i in range(1, length_of_the_list):
        if i == length_of_the_list - 1:
            print(", and " + names_list[i])
        else:
            print(", " + names_list[i], end="")


Program 4

import random
import sys

while True:
    try:
        level = int(input("Level: "))
        if level >= 1 and level <= 100:
            break
    except:
        pass

random_number = random.randint(1,level)

while True:
    try:
        guess = int(input("Guess: "))
        if guess >= 1:
            if guess > random_number:
                print("Too large!")
            elif guess < random_number:
                print("Too small!")
            else:
                print("Just right!")
                break
    except:
        pass




Program 5

import random


def main():
    level = get_level()
    score = generate_game(level)
    print("Score:", score)


def get_level():
    while True:
        try:
            level = int(input("Level: "))
            if level in [1,2,3]:
                break
        except:
            pass
    return level


def generate_integer(level):
    if level == 1:
        x = random.randint(0,9)
        y = random.randint(0,9)
    elif level == 2:
        x = random.randint(10,99)
        y = random.randint(10,99)
    else:
        x = random.randint(100,999)
        y = random.randint(100,999)
    return x,y


def generate_round(x, y):
    count_tries = 1
    while count_tries <= 3:
        try:
            question = int(input(f"{x} + {y} = "))
            if question == (x + y):
                return True
            else:
                print("EEE")
                count_tries += 1
        except:
            print("EEE")
            count_tries += 1
            pass
    print(f"{x} + {y} = {x + y}")
    return False


def generate_game(level):
    count_round = 0
    score = 0
    while count_round < 10:
        x, y = generate_integer(level)
        response = generate_round(x, y)
        if response == True:
            score += 1
        count_round += 1
    return score


if __name__ == "__main__":
    main()

Program 6

import requests
import sys

if len(sys.argv) == 2:
    try:
        value = float(sys.argv[1])
    except:
        print("Command-line argument is not a number ")
        sys.exit(1)
else:
    print("Missing command-line argument")
    sys.exit(1)

try:
    r = requests.get('https://api.coindesk.com/v1/bpi/currentprice.json')
    response = r.json()
    bitcoin_to_USD = response['bpi']['USD']['rate']
    bitcoin_to_USD = bitcoin_to_USD.replace(",","")
    amount = float(bitcoin_to_USD) * float(sys.argv[1])
    print(f"${amount:,.4f}")

except requests.RequestException:
    print("RequestException")
    sys.exit(1)

 