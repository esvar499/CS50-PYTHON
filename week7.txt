6:01 AM 5/27/2022
Week 7 Problem statement solution.
Note:- for this week problem statement we have create a 1  directory and 2 sub file like before week  for numb3rs,um,working file and directories.

Folder Name :- numb3rs
2 file name :-
numb3rs.py 
test_numb3rs.py 

numb3rs.py
import re

def main():
    print(validate(input("IPv4 Address: ")))

def validate(ip):
    if re.search(r"^[0-9_]+\.[0-9_]+\.[0-9_]+\.[0-9_]+$", ip):
        split_ip = ip.split(".")
        for piece in split_ip:
            if int(piece) > 255:
                return False
        return True
    else:
        return False

if __name__ == "__main__":
    main()

test_numb3rs.py 

from numb3rs import validate

def main():
    test_format()
    test_range()

def test_format():
    assert validate(r'cat') == False
    assert validate(r'127') == False
    assert validate(r'127.0') == False
    assert validate(r'127.0.1') == False
    assert validate(r'127.0.1.2') == True

def test_range():
    assert validate(r'255.255.255.255') == True
    assert validate(r'512.1.1.1') == False
    assert validate(r'1.512.1.1') == False
    assert validate(r'1.1.512.1') == False
    assert validate(r'1.1.1.512') == False

if __name__ == "__main__":
    main()

File Name :-
watch.py
import re

def main():
    print(parse(input("HTML: ")))


def parse(s):
    iframe = re.search(r"(<iframe)(.)*(></iframe>)",s)
    if iframe:
        searched = re.search(r"(http(s)*?://(?:www\.)?youtube\.com/embed/)([a-z_A-Z_0-9_]+)", s)
        if searched:
            str = searched.group()
            matches = re.match(r"^(http(s)*?://(?:www\.)?youtube\.com/embed/)([a-z_A-Z_0-9_]+)$", str)
            return "https://youtu.be/" + matches.groups()[2]


if __name__ == "__main__":
    main()
File Name :-
test_working.py 
from working import convert
import pytest


def main():
    test_wrong_format()
    test_time()
    test_wrong_hour()
    test_wrong_minute()

# test ValueError
def test_wrong_format():
    with pytest.raises(ValueError):
        convert('9 AM - 5 PM')


def test_time():
    assert convert('9 AM to 5 PM') == '09:00 to 17:00'
    assert convert('10 PM to 8 AM') == '22:00 to 08:00'
    assert convert('10:30 PM to 8:50 AM') == '22:30 to 08:50'


def test_wrong_hour():
    with pytest.raises(ValueError):
        convert('09:00 AM - 17:00')


def test_wrong_minute():
    with pytest.raises(ValueError):
        convert('9:60 AM to 5:60 PM')


if __name__ == "__main__":
    main()
File Name :-
working.py 
import re

def main():
    print(convert(input("Hours: ")))


def convert(s):
    isCorrectFormat = re.search(r"^([0-9][0-2]*:*([0-5][0-9])*) ([A-P]M) to ([0-9][0-2]*:*([0-5][0-9])*) ([A-P]M)$", s)
    if isCorrectFormat:
        matches = re.match(r"^([0-9][0-2]*)(:*[0-5_0-9]*) ([A-P]M) to ([0-9][0-2]*)(:*[0-5_0-9]*) ([A-P]M)$", s)
        pieces = matches.groups()
        if int(pieces[0]) > 12 or int(pieces[3]) > 12:
            raise ValueError
        # Check if first time is in correct 24-hours format
        first_time = new_format(pieces[0], pieces[1], pieces[2])
        # Check if second time is in correct 24-hours format
        second_time = new_format(pieces[3], pieces[4], pieces[5])
        return first_time + " to " + second_time
    else:
        raise ValueError


def new_format(hour, minutes, am_pm):
    if am_pm == 'PM':
        if int(hour) == 12:
            new_hour = 12
        else:
            new_hour = int(hour) + 12
    else:
        if int(hour) == 12:
            new_hour = 0
        else:
            new_hour = int(hour)
    if minutes == "":
        new_time = f"{new_hour:02}" + ":00"
    else:
        new_time = f"{new_hour:02}" + minutes
    return new_time


if __name__ == "__main__":
    main()
File Name :-
test_um.py 
from um import count

def main():
    test_upper_lower_case()
    test_word_with_um()
    test_sourrounded_by_space()


def test_upper_lower_case():
    assert count('Um, thanks for the album') == 1
    assert count('Um, thanks, UM, for, um, the album') == 3


def test_word_with_um():
    assert count('yummi') == 0


def test_sourrounded_by_space():
    assert count('Hi um baby') == 1


if __name__ == "__main__":
    main()
File Name :-
um.py
import re

def main():
    print(count(input("Text: ")))


def count(s):
    um_list = re.findall(r"\b\W*um\W*", s, re.IGNORECASE)
    return len(um_list)

if __name__ == "__main__":
    main()

File Name :-
response.py
from validator_collection import validators

def main():
    email_address = input("What's your email address? ")
    try:
        emailIsValid = validators.email(email_address)
        print("Valid")
    except:
        print("Invalid")

if __name__ == "__main__":
    main()



